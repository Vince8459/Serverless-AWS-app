org: vinvader137
app: serverless-app1
service: serverless-app1
frameworkVersion: "3.27.0"

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  #lambdaHashingVersion: '20201221'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  tracing:
    lambda: true
    apiGateway: true
  environment:
    TODOS_TABLE: serverless-app-app1-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-app1-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: serverless-app1
    INDEX_NAME: ${self:provider.environment.TODOS_CREATED_AT_INDEX}

  logs:
    restApi: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: TODOS APP
        description: Serverless application for todos application
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}           

functions:
  # hello:
  #   handler: src/handler.hello
  #   events:
  #     - httpApi:
  #         path: /
  #         method: get
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth 
          
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-todo-role-${self:provider.stage}      
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo task
            description: Create a new todo task
            requestModels:
              'application/json': CreateTodoRequest


    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-todo-role4-${self:provider.stage}      
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

resources:
  Resources:
    APIGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: RestApi
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: APIGatewayRestApi
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'APIGatewayRestApi'
    RequestBodyValidator:
        Type: AWS::ApiGateway::RequestValidator
        Properties:
          Name: 'request-body-validator'
          RestApiId:
            Ref: ApiGatewayRestApi
          ValidateRequestBody: true
          ValidateRequestParameters: false

# TodosTable:
    TodosTable: 
     Type: AWS::DynamoDB::Table
     Properties: 
      AttributeDefinitions: 
        - AttributeName: userId
          AttributeType: S
        - AttributeName: todoId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema: 
        - AttributeName: userId
          KeyType: "HASH"
        - AttributeName: todoId
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: ${self:provider.environment.TODOS_TABLE}
      LocalSecondaryIndexes:
         - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
           KeySchema:
             - AttributeName: userId
               KeyType: HASH
             - AttributeName: createdAt
               KeyType: RANGE
           Projection:
             ProjectionType: ALL 

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty

    # AttachmentsBucket:
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"

    # BucketPolicy:
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
       Bucket: !Ref AttachmentsBucket
       PolicyDocument:
          Statement:
           - Sid: PublicReadForGetBucketObjects
             Effect: Allow
             Principal: "*"
             Action:
              - s3:GetObject
             Resource: 
              - "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
